<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhumenger ❤ blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhumenger.top/"/>
  <updated>2019-06-10T11:39:50.316Z</updated>
  <id>http://zhumenger.top/</id>
  
  <author>
    <name>zhumenger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆</title>
    <link href="http://zhumenger.top/2019/06/10/%E5%A0%86/"/>
    <id>http://zhumenger.top/2019/06/10/堆/</id>
    <published>2019-06-10T11:07:00.000Z</published>
    <updated>2019-06-10T11:39:50.316Z</updated>
    
    <content type="html"><![CDATA[<p><strong>堆</strong>：一种支持插入，删除，查询最值的数据结构，是一颗完全二叉树，实际上就是一个优先队列<strong>priority_queue</strong>,这里我们用数组的实现这个堆<br><strong>大根堆</strong>：树中的任意一个节点的权值都小于等于其父节点<br><strong>小根堆</strong>：树中的任意一个节点的权值都大于等于其父节点<br><strong>如何实现堆</strong>：直接用一个数组来保存二叉堆， 逐层的从左到右依次编号，将此编号作为节点在数组中存储的位置。所以，父亲点编号等于子节点编号除以2，左子节点编号等于父节点编号乘以2，又子节点等于父节点编号乘2加1 </p><p><strong>堆的基本操作</strong>：1求集合中的最小值：h[ 1 ]<br>2.插入一个数：h[++n] = x;up(n);  //up函数将x向上调整，找到x的位置，保证堆的有序性<br>3.删除最小值：h[1] = h[n–];down(1) //down函数，将x向下调整，找到x的位置，保证堆的有序性<br>4.删除任意一个元素：h[x] = h[n–];down(x);up(x);//因为不确定x的大小，所以可能是向上调整，也可能是向下调整，这俩个函数虽然都写上了，但实际上只会执行一个，<br>5.修改任意一个元素：h[k] = x;down(k);up(k)//跟4同理<br><strong>时间复杂度</strong>：与堆的高度有关，所以是O（logN）<br>代码如下：</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入一个长度为n的整数数列，从小到大输出前m小的数。</p></blockquote><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><blockquote><p>第一行包含整数n和m。<br>第二行包含n个整数，表示整数数列。</p></blockquote><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><blockquote><p>共一行，包含m个整数，表示整数数列中前m小的数。</p></blockquote><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><blockquote><p>1≤m≤n≤105，<br>1≤数列中元素≤109</p></blockquote><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><blockquote><p>5 3<br>4 5 1 3 2</p></blockquote><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><blockquote><p>1 2 3</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> h[N], n ,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="comment">//向上调整</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">2</span> * p;  <span class="comment">//子节点</span></span><br><span class="line">    <span class="keyword">while</span>(s &lt;= n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s &lt; n &amp;&amp; h[s] &gt; h[s + <span class="number">1</span>])s++;  <span class="comment">//找到左右子节点的最小值</span></span><br><span class="line">        <span class="keyword">if</span>(h[s] &lt; h[p])&#123;  <span class="comment">//如果子节点比父节点小</span></span><br><span class="line">            swap(h[s], h[p]);  <span class="comment">//则交换</span></span><br><span class="line">            p = s;   <span class="comment">//继续向下调整</span></span><br><span class="line">            s = <span class="number">2</span> * p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p)</span>  <span class="comment">//向上调整，</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p &gt; <span class="number">1</span>)&#123; </span><br><span class="line">        <span class="keyword">if</span>(h[p] &lt; h[p / <span class="number">2</span>])&#123;  <span class="comment">//如果子节点小于父节点</span></span><br><span class="line">            swap(h[p], h[p / <span class="number">2</span>]);  <span class="comment">//则交换</span></span><br><span class="line">            p /= <span class="number">2</span>;  <span class="comment">//继续向上调整</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; h[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)down(i);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; h[<span class="number">1</span>] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        h[<span class="number">1</span>] = h[n--];</span><br><span class="line">        down(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;：一种支持插入，删除，查询最值的数据结构，是一颗完全二叉树，实际上就是一个优先队列&lt;strong&gt;priority_queue&lt;/strong&gt;,这里我们用数组的实现这个堆&lt;br&gt;&lt;strong&gt;大根堆&lt;/strong&gt;：树中的任意一个节
      
    
    </summary>
    
      <category term="数据结构基础" scheme="http://zhumenger.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="堆" scheme="http://zhumenger.top/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>你好</title>
    <link href="http://zhumenger.top/2019/06/10/%E4%BD%A0%E5%A5%BD/"/>
    <id>http://zhumenger.top/2019/06/10/你好/</id>
    <published>2019-06-10T11:05:33.000Z</published>
    <updated>2019-06-10T11:05:33.158Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
